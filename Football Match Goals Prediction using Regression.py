# -*- coding: utf-8 -*-
"""Regression_Models_Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1L50xGp1fjaBFWHC97tHiA2I5OTCA4lu3
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv(r'/content/results.csv', encoding='latin-1')
df.head()

df.isna().sum()

df.dropna(inplace=True)

df.isna().sum()

df.dtypes

df.info()

df.describe()

df.columns

df.head()

from sklearn.preprocessing import LabelEncoder

le = LabelEncoder()

for column in ['Season', 'HomeTeam', 'AwayTeam', 'FTHG', 'FTAG', 'FTR', 'HTHG', 'HTAG', 'HTR', 'Referee', 'HS', 'AS', 'HST', 'AST', 'HC', 'AC', 'HF', 'AF', 'HY', 'AY', 'HR', 'AR']:
    df[column] = le.fit_transform(df[column])

df.head()

df['HomeTeam'].value_counts()

df_new = df.drop(['DateTime'], axis=1)
df_new.head()

df_new.reset_index(inplace = True)

df_new.head()

df_new.drop('index', axis=1, inplace=True)

df_new.head()

"""# **Linear Regression for FTHG**"""

X = df_new.drop('FTHG', axis=1)
y = df_new['FTHG']

X.head()

y.head()

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=36)

X_train.shape

y_train.shape

from sklearn.linear_model import LinearRegression

lr_fthg = LinearRegression()

lr_fthg.fit(X_train, y_train)

train_pred = lr_fthg.predict(X_train)

# visualizing the predictions on train data
plt.scatter(y_train, train_pred, color='b')
plt.plot([min(train_pred), max(train_pred)], [min(train_pred), max(train_pred)], color='r')
plt.xlabel('Actual Values')
plt.ylabel('Predicted Values')
plt.title('Actual vs Predicted')
plt.show()

test_pred = lr_fthg.predict(X_test)

# visualizing the predictions on test data
plt.scatter(y_test, test_pred, color='b')
plt.plot([min(test_pred), max(test_pred)], [min(test_pred), max(test_pred)], color='r')
plt.xlabel('Actual Values')
plt.ylabel('Predicted Values')
plt.title('Actual vs Predicted')
plt.show()

lr_fthg.coef_

lr_fthg.intercept_

from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score

mae_fthg = mean_absolute_error(y_test, test_pred)
mae_fthg

mse_fthg = mean_squared_error(y_test, test_pred)
mse_fthg

rmse_fthg = np.sqrt(mean_squared_error(y_test, test_pred))
rmse_fthg

r2_fthg = r2_score(y_test, test_pred)
r2_fthg

"""# ***Linear Regression for FTAG***"""

X = df_new.drop('FTAG', axis=1)
y = df_new['FTAG']

X.head()

y.head()

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=36)

X_train.shape

y_train.shape

from sklearn.linear_model import LinearRegression

lr_ftag = LinearRegression()

lr_ftag.fit(X_train, y_train)

train_pred = lr_ftag.predict(X_train)

# visualizing the predictions on train data
plt.scatter(y_train, train_pred, color='b')
plt.plot([min(train_pred), max(train_pred)], [min(train_pred), max(train_pred)], color='r')
plt.xlabel('Actual Values')
plt.ylabel('Predicted Values')
plt.title('Actual vs Predicted')
plt.show()

test_pred = lr_ftag.predict(X_test)

# visualizing the predictions on test data
plt.scatter(y_test, test_pred, color='b')
plt.plot([min(test_pred), max(test_pred)], [min(test_pred), max(test_pred)], color='r')
plt.xlabel('Actual Values')
plt.ylabel('Predicted Values')
plt.title('Actual vs Predicted')
plt.show()

lr_ftag.coef_

lr_ftag.intercept_

from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score

mean_absolute_error(y_test, test_pred)

mean_squared_error(y_test, test_pred)

np.sqrt(mean_squared_error(y_test, test_pred))

r2_score(y_test, test_pred)

"""# ***Ridge Regression***"""

df_new.head()

X = df_new.drop(['FTHG'], axis=1)
y = df_new.FTHG

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=36)

X_train.shape

y_train.shape

from sklearn.linear_model import Ridge

rr = Ridge(alpha=0.05)

rr.fit(X_train, y_train)

train_pred = rr.predict(X_train)

# visualizing the predictions on train data
plt.scatter(y_train, train_pred, color='b')
plt.plot([min(train_pred), max(train_pred)], [min(train_pred), max(train_pred)], color='r')
plt.xlabel('Actual Values')
plt.ylabel('Predicted Values')
plt.title('Actual vs Predicted')
plt.show()

test_pred = rr.predict(X_test)

# visualizing the predictions on test data
plt.scatter(y_test, test_pred, color='b')
plt.plot([min(test_pred), max(test_pred)], [min(test_pred), max(test_pred)], color='r')
plt.xlabel('Actual Values')
plt.ylabel('Predicted Values')
plt.title('Actual vs Predicted')
plt.show()

rr.coef_

rr.intercept_

from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

ridge_mae = mean_absolute_error(y_test, test_pred)
ridge_mae

ridge_mse = mean_squared_error(y_test, test_pred)
ridge_mse

ridge_rmse = np.sqrt(mean_squared_error(y_test, test_pred))
ridge_rmse

ridge_r2 = r2_score(y_test, test_pred)
ridge_r2

"""# ***Lasso Regression***"""

X = df_new.drop(['FTHG'], axis=1)
y = df_new.FTHG

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=36)

X_train.shape

y_train.shape

from sklearn.linear_model import Lasso

lasso = Lasso(alpha=0.05)

lasso.fit(X_train, y_train)

train_pred = lasso.predict(X_train)

# visualizing the predictions on train data
plt.scatter(y_train, train_pred, color='b')
plt.plot([min(train_pred), max(train_pred)], [min(train_pred), max(train_pred)], color='r')
plt.xlabel('Actual Values')
plt.ylabel('Predicted Values')
plt.title('Actual vs Predicted')
plt.show()

test_pred = lasso.predict(X_test)

# visualizing the predictions on test data
plt.scatter(y_test, test_pred, color='b')
plt.plot([min(test_pred), max(test_pred)], [min(test_pred), max(test_pred)], color='r')
plt.xlabel('Actual Values')
plt.ylabel('Predicted Values')
plt.title('Actual vs Predicted')
plt.show()

lasso.coef_

lasso.intercept_

from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

lasso_mae = mean_absolute_error(y_test, test_pred)
lasso_mae

lasso_mse = mean_squared_error(y_test, test_pred)
lasso_mse

lasso_rmse = np.sqrt(mean_squared_error(y_test, test_pred))
lasso_rmse

lasso_r2 = r2_score(y_test, test_pred)
lasso_r2

"""# ***Decision Tree Regressor for FTHG***"""

X = df_new.drop('FTHG', axis=1)
y = df_new['FTHG']

X.head()

y.head()

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=36)

X_train.shape

y_train.shape

from sklearn.tree import DecisionTreeRegressor

dr = DecisionTreeRegressor(criterion='squared_error', max_depth=5)

dr.fit(X_train, y_train)

from sklearn.tree import export_graphviz

export_graphviz(dr, out_file='reg_tree.dot', feature_names=X.columns)

import graphviz

with open('reg_tree.dot') as f:
    dot_graph = f.read()

graphviz.Source(dot_graph)

train_pred = dr.predict(X_train)

# visualizing the predictions on train data
plt.scatter(y_train, train_pred, color='b')
plt.plot([min(train_pred), max(train_pred)], [min(train_pred), max(train_pred)], color='r')
plt.xlabel('Actual Values')
plt.ylabel('Predicted Values')
plt.title('Actual vs Predicted')
plt.show()

test_pred = dr.predict(X_test)

# visualizing the predictions on test data
plt.scatter(y_test, test_pred, color='b')
plt.plot([min(test_pred), max(test_pred)], [min(test_pred), max(test_pred)], color='r')
plt.xlabel('Actual Values')
plt.ylabel('Predicted Values')
plt.title('Actual vs Predicted')
plt.show()

from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score

dr_mae = mean_absolute_error(y_test, test_pred)
dr_mae

dr_mse = mean_squared_error(y_test, test_pred)
dr_mse

dr_rmse = np.sqrt(mean_squared_error(y_test, test_pred))
dr_rmse

dr_r2 = r2_score(y_test, test_pred)
dr_r2

"""# **Report for FTHG Regression Models**"""

report = pd.DataFrame({'Model': ['Linear Regression', 'Ridge Regression', 'Lasso Regression', 'Decision Tree Regressor'],
                       'MAE': [mae_fthg, ridge_mae, lasso_mae, dr_mae],
                       'MSE': [mse_fthg, ridge_mse, lasso_mse, dr_mse],
                       'RMSE': [rmse_fthg, ridge_rmse, lasso_rmse, dr_rmse],
                       'R2': [r2_fthg, ridge_r2, lasso_r2, dr_r2]})
report

"""# ***Decision Tree Classifier for FTR***"""

df_new.head()

X = df_new.drop('FTR', axis=1)
y = df_new.pop('FTR')

X.head()

y.head()

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=36)

X_train.shape

y_train.shape

from sklearn.tree import DecisionTreeClassifier

dt = DecisionTreeClassifier(criterion='entropy', max_depth=5)

dt.fit(X_train, y_train)

train_pred = dt.predict(X_train)

n = np.arange(len(X_train))

plt.scatter(n, y_train, color='r')
plt.scatter(n, train_pred, color='b')
plt.show()

from sklearn.tree import export_graphviz

export_graphviz(dt, out_file='dt.dot', feature_names=X.columns)

import graphviz

with open('dt.dot') as f:
    dot_graph = f.read()

graphviz.Source(dot_graph)

from sklearn.metrics import accuracy_score, confusion_matrix, classification_report, precision_score, recall_score, f1_score

accuracy_score(y_train, train_pred)

cm = confusion_matrix(y_train, train_pred)
cm

sns.heatmap(cm, cmap='viridis', annot=True, fmt='.2f')
plt.show()

test_pred = dt.predict(X_test)

n = np.arange(len(X_test))

plt.scatter(n, y_test, color='r')
plt.scatter(n, test_pred, color='b')
plt.show()

accuracy_score(y_test, test_pred)

cm = confusion_matrix(y_test, test_pred)
cm

sns.heatmap(cm, annot=True, fmt='.2f', cmap='viridis')
plt.show()

precision_score(y_test, test_pred, average='weighted')

recall_score(y_test, test_pred, average='weighted')

f1_score(y_test, test_pred, average='weighted')

print(classification_report(y_test, test_pred))